resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:

- name: om-cli
  type: github-release
  source:
    user: pivotal-cf
    repository: om
    access_token: ((github_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: pivnet-cli
  type: github-release
  source:
    user: pivotal-cf
    repository: pivnet-cli
    access_token: ((github_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: pipelines-repo
  type: git
  source:
    uri: ((github_repo))
    branch: ((github_branch))
    username: ((github_username))
    password: ((github_token))

- name: pivnet-product
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((product_name))
    product_version: ((product_version))

jobs:

- name: upload-product
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs:
        - "*.pivotal"
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*-linux"
    - get: pivnet-cli
      params:
        globs:
        - "*linux-amd64*"

  - task: upload-tile
    file: pipelines-repo/tasks/upload-product/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PIVNET_API_TOKEN: ((pivnet_token))

  - task: upload-stemcell
    file: pipelines-repo/tasks/stemcell-uploader/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PIVNET_API_TOKEN: ((pivnet_token))
      NO_PROXY: ((company_proxy_domain))
      OPS_MGR_IP: ((ops_mgr_ip))
      IAAS_TYPE: ((iaas_type))

- name: stage-product
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [upload-product]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs:
        - "*.pivotal"
      passed: [upload-product]
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*-linux"
      passed: [upload-product]

  - task: stage-tile
    file: pipelines-repo/tasks/stage-product/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: ((product_identifier))

- name: config-product
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs:
        - "*.pivotal"
      passed: [stage-product]
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*-linux"
      passed: [stage-product]

  - task: config-tile
    file: pipelines-repo/tasks/config-rabbitmq/task.yml
    params:
      PRODUCT_IDENTIFIER: ((product_identifier))
      METRICS_POLLING_INTERVAL: ((metrics_polling_interval))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      OPS_MGR_GENERATE_SSL_ENDPOINT: ((om_generate_ssl_endpoint))
      SINGLETON_JOB_AZ: ((singleton_jobs_az))
      OTHER_AZS: ((other_azs))
      NETWORK_NAME: ((deployment_nw))
      SERVICES_NETWORK: ((services_nw))
      SYSLOG_SELECTOR: ((syslog_selector))
      SYSLOG_ADDRESS: ((syslog_address))
      SYSLOG_PORT: ((syslog_port))
      DISK_ALARM_THRESHOLD: ((disk_alarm_threshold))
      RMQ_SERVER_INSTANCES: ((rabbitmq_server_instances))
      RMQ_HAPROXY_INSTANCES: ((rabbitmq_haproxy_instances))
      RMQ_BROKER_INSTANCES: ((rabbitmq_broker_instances))
      RMQ_ONDEMAND_INSTANCES: ((rabbitmq_ondemand_instances))
      RMQ_PLUGINS: ((rabbitmq_server_plugins))
      RMQ_SSL_CERT: ((rabbitmq_ssl_certificate))
      RMQ_PRIVATE_CERT: ((rabbitmq_private_certificate))
      RMQ_CA_CERT: ((rabbitmq_ca_certificate))
      SSL_VERIFY: ((ssl_verify))
      SSL_VERIFICATION_DEPTH: ((ssl_verification_depth))
      SSL_FAIL_IF_NO_PEER_CERT: ((ssl_fail_if_no_peer_cert))
      ERLANG_COOKIE_NAME: ((erlang_cookie_name))
      RMQ_SERVER_CONFIG: ((rabbitmq_server_config))
      RMQ_SECURITY_OPTION: ((rabbitmq_security_option))
      RMQ_NW_PARTITION_HANDLING: ((rabbitmq_network_partition_handling))
      RMQ_SERVER_PORTS: ((rabbitmq_server_ports))
      RMQ_HAPROXY_STATIC_IPS: ((rabbitmq_haproxy_static_ips))
      RMQ_SERVER_STATIC_IPS: ((rabbitmq_server_static_ips))
      RMQ_ADMIN_USERNAME: ((rabbitmq_admin_username))
      RMQ_ADMIN_PASSWORD: ((rabbitmq_admin_password))
      RMQ_LOADBALANCER_DNS: ((rabbitmq_loadbalancer_dns_name))
      IS_RMQ_POLICY_ENABLED: ((rabbitmq_policy_enabled))
      RMQ_POLICY_DEFINITION: ((rabbitmq_policy_definition))
      ENABLE_SINGLE_NODE_PLAN: ((enable_single_node_plan))
      PLAN_NAME: ((plan_name))
      PLAN_DESCRIPTION: ((plan_description))
      PCF_MARKETPLACE_PRODUCT_IDENTIFIER: ((marketplace_identifier))
      SERVICE_INSTANCE_COUNT: ((single_node_service_instance_quota))
      GLOBAL_SERVICE_INSTANCE_QUOTA: ((global_service_instance_quota))
      SINGLE_NODE_PERSISTENT_DISK_TYPE: ((single_node_persistent_disk_type))
      ON_DEMAND_BROKER_AZS: ((on_demand_broker_azs))
      ON_DEMAND_BROKER_VM_TYPE: ((on_demand_broker_vm_type))
      VM_EXTENSIONS: ((vm_extensions))
      RMQ_SERVER_NODE_PERSISTENT_DISK_SIZE: ((rabbitmq_server_node_disk_size))

- name: disable-errands
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [config-product]
    - get: om-cli
      params:
        globs:
        - "*om-linux*"
      passed: [config-product]

  - task: disable-errands
    file: pipelines-repo/tasks/disable-errands/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: ((product_identifier))
      ERRANDS: ((errands_to_disable))

- name: apply-changes
  plan:
  - aggregate:
    - get: pipelines-repo
      trigger: true
      passed: [disable-errands]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs:
        - "*.pivotal"
      passed: [config-product]
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*-linux"
      passed: [disable-errands]

  - task: validate-apply-changes
    file: pipelines-repo/tasks/validate-apply-changes/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: ((product_identifier))

  - task: apply-changes
    file: pipelines-repo/tasks/apply-changes/task.yml
    params:
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))

- name: set-upgrade-pipeline
  plan:
  - aggregate:
    - get: pipelines-repo
      trigger: true
      passed: [apply-changes]

  - task: set-upgrade-pipeline
    file: pipelines-repo/tasks/set-upgrade-pipeline/task.yml
    params:
      CONCOURSE_USERNAME: ((concourse_user))
      CONCOURSE_PASSWD: ((concourse_pwd))
      ATC_EXTERNAL_URL: ((concourse_url))
      BUILD_PIPELINE_NAME: ((pipeline-name))
      BUILD_TEAM_NAME: ((team-name))
      UPGRADE_PIPELINE_NAME: ((upgrade-pipeline-name))
